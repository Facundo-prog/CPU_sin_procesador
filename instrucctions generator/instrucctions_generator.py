import os
import math

filePath = os.getcwd() + "/instrucctions generator/control.asm"
if os.name == "nt": filePath = os.getcwd() + "\\instrucctions generator\\control.asm"

instructions = [

  # Control

  "0000000000000000",  # NA
  "0000000000000000",

  "0000000000000000",  # STOP
  "0000000000000001",


  # Operator

  "0000000001001000",  # CORA
  "0000000000001000",

  "0000000010001000",  # CORB
  "0000000000001000",

  "0000000011001000",  # CORC
  "0000000000001000",

  "0000000100001000",  # CORD
  "0000000000001000",

  "0000000101001000",  # CODIR
  "0000000000001000",

  "0000000110001000",  # COALU
  "0000000000001000",


  # Registers

  "0000000001110000",  # CACCRA
  "0000000000110000",

  "0000000010110000",  # CACCRB
  "0000000000110000",

  "0000000011110000",  # CACCRC
  "0000000000110000",

  "0000000100110000",  # CACCRD
  "0000000000110000",

  "0000000101110000",  # CACCDIR
  "0000000000110000",

  "0000000110110000",  # CACCALU
  "0000000000110000",

  "0000000010010000",  # CRARB
  "0000000000010000",

  "0000000011010000",  # CRARC
  "0000000000010000",

  "0000000100010000",  # CRARD
  "0000000000010000",

  "0000000101010000",  # CRADIR
  "0000000000010000",

  "0000000110010000",  # CRAALU
  "0000000000010000",

  "0000000001011000",  # CRBRA
  "0000000000011000",

  "0000000011011000",  # CRBRC
  "0000000000011000",

  "0000000100011000",  # CRBRD
  "0000000000011000",

  "0000000101011000",  # CRBDIR
  "0000000000011000",

  "0000000110011000",  # CRBALU
  "0000000000011000",

  "0000000001100000",  # CRCRA
  "0000000000100000",

  "0000000010100000",  # CRCRB
  "0000000000100000",

  "0000000100100000",  # CRCRD
  "0000000000100000",

  "0000000101100000",  # CRCDIR
  "0000000000100000",

  "0000000110100000",  # CRCALU
  "0000000000100000",

  "0000000001101000",  # CRDRA
  "0000000000101000",

  "0000000010101000",  # CRDRB
  "0000000000101000",

  "0000000011101000",  # CRDRC
  "0000000000101000",

  "0000000101101000",  # CRDDIR
  "0000000000101000",

  "0000000110101000",  # CRDALU
  "0000000000101000",


  # Inputs

  "0000001001000000",  # CIRA
  "0000001000000000",

  "0000001010000000",  # CIRB
  "0000001000000000",

  "0000001011000000",  # CIRC
  "0000001000000000",

  "0000001100000000",  # CIRD
  "0000001000000000",

  "0000001101000000",  # CIDIR
  "0000001000000000",

  "0000001110000000",  # CIALU
  "0000001000000000",

  "0000010001000000",  # CI2RA
  "0000010000000000",

  "0000010010000000",  # CI2RB
  "0000010000000000",

  "0000010011000000",  # CI2RC
  "0000010000000000",

  "0000010100000000",  # CI2RD
  "0000010000000000",

  "0000010101000000",  # CI2DIR
  "0000010000000000",

  "0000010110000000",  # CI2ALU
  "0000010000000000",

  "0000011001000000",  # CI3RA
  "0000011000000000",

  "0000011010000000",  # CI3RB
  "0000011000000000",

  "0000011011000000",  # CI3RC
  "0000011000000000",

  "0000011100000000",  # CI3RD
  "0000011000000000",

  "0000011101000000",  # CI3DIR
  "0000011000000000",

  "0000011110000000",  # CI3ALU
  "0000011000000000",


  # Outputs

  "0000100000001000",  # COOUT1
  "0000000000001000",

  "0000100000010000",  # CRAOUT1
  "0000000000010000",

  "0000100000011000",  # CRBOUT1
  "0000000000011000",

  "0000100000100000",  # CRCOUT1
  "0000000000100000",

  "0000100000101000",  # CRDOUT1
  "0000000000101000",

  "0000100000110000",  # CACCOUT1
  "0000000000110000",

  "0000101000001000",  # COOUT2
  "0000000000001000",

  "0000101000010000",  # CRAOUT2
  "0000000000010000",

  "0000101000011000",  # CRBOUT2
  "0000000000011000",

  "0000101000100000",  # CRCOUT2
  "0000000000100000",

  "0000101000101000",  # CRDOUT2
  "0000000000101000",

  "0000101000110000",  # CACCOUT2
  "0000000000110000",

  "0000110000001000",  # COOUT3
  "0000000000001000",

  "0000110000010000",  # CRAOUT3
  "0000000000010000",

  "0000110000011000",  # CRBOUT3
  "0000000000011000",

  "0000110000100000",  # CRCOUT3
  "0000000000100000",

  "0000110000101000",  # CRDOUT3
  "0000000000101000",

  "0000110000110000",  # CACCOUT3
  "0000000000110000",

  "0000111000001000",  # CODOUT
  "0000000000001000",

  "0000111000010000",  # CRADOUT
  "0000000000010000",

  "0000111000011000",  # CRBDOUT
  "0000000000011000",

  "0000111000100000",  # CRCDOUT
  "0000000000100000",

  "0000111000101000",  # CRDDOUT
  "0000000000101000",

  "0000111000110000",  # CACCDOUT
  "0000000000110000",


  # ALU

  "0000000111001010",  # AALUO
  "0000000000001010",

  "0000000111010010",  # AALURA
  "0000000000010010",

  "0000000111011010",  # AALURB
  "0000000000011010",

  "0000000111100010",  # AALURC
  "0000000000100010",

  "0000000111101010",  # AALURD
  "0000000000101010",

  "0000000111001011",  # NALUO
  "0000000000001011",

  "0000000111010011",  # NALURA
  "0000000000010011",

  "0000000111011011",  # NALURB
  "0000000000011011",

  "0000000111100011",  # NALURC
  "0000000000100011",

  "0000000111101011",  # NALURD
  "0000000000101011",


  # Jumps

  "0000000000001000",  # JIO
  "0000000000001100",

  "0000000000010000",  # JIRA
  "0000000000010100",

  "0000000000011000",  # JIRB
  "0000000000011100",

  "0000000000100000",  # JIRC
  "0000000000100100",

  "0000000000101000",  # JIRD
  "0000000000101100",

  "0000000000001000",  # JCCO
  "0000000000001101",

  "0000000000010000",  # JCCRA
  "0000000000010101",

  "0000000000011000",  # JCCRB
  "0000000000011101",

  "0000000000100000",  # JCCRC
  "0000000000100101",

  "0000000000101000",  # JCCRD
  "0000000000101101",

  "0000000000001000",  # JCZO
  "0000000000001110",

  "0000000000010000",  # JCZRA
  "0000000000010110",

  "0000000000011000",  # JCZRB
  "0000000000011110",

  "0000000000100000",  # JCZRC
  "0000000000100110",

  "0000000000101000",  # JCZRD
  "0000000000101110",
]



def convertToBinary(number):
  binary = ""
  endBinary = ""

  if number >= 0 & number <= 255:

    while number > 0:

      if number % 2 == 0:
        binary = "0" + binary

      else:
        binary = "1" + binary

      number = int(math.floor(number / 2))

  else:

    if number == 0:
      binary = "00000000"

    else:
      binary = "No se pudo convertir el numero"


  for i in range(8 - len(binary)):
    endBinary += "0"

  endBinary += binary

  return endBinary



file = open(filePath, "w")

countIntructions = len(instructions)
firstCicle = ""
secondCicle = ""
endChain = ""
count = 0


for i in range(0, countIntructions, 2):
  firstCicle = instructions[i]
  secondCicle = instructions[i + 1]

  endChain = "00000" + convertToBinary(count) + "001" + firstCicle.replace(" ", "")
  file.write(endChain)

  print("-> ", endChain)

  endChain = "00000" + convertToBinary(count) + "010" + secondCicle.replace(" ", "")
  file.write(endChain)

  print("-> ", endChain)
  print("")

  count += 1


print("\n\nFile generated succesfulled\n")

print(str(count) + " instructions were generated")

file.close()

