import os
import platform
import math

archivo = os.getcwd() + "\\archivosSD\\control.asm"

if platform.platform() == "linux" :
  archivo = os.getcwd() + '/archivosSD/control.asm'


instruccionesControl = [
    # CONTROL
    '1111111111111111', #NA
    '1111111111111111',
    '1111111111111111', #STOP
    '1111111111111110',

    # DATOS
    '1111101111111101', #CORA
    '1111111111111101',
    '1111011111111101', #CORB
    '1111111111111101',
    '1111001111111101', #CORC
    '1111111111111101',
    '1110111111111101', #CODIR
    '1111111111111101',
    '1110101111111101', #COALU
    '1111111111111101',

    # REGISTROS
    '1111101111111011', #CACRA
    '1111111111111011',
    '1111011111111011', #CACRB
    '1111111111111011',
    '1111001111111011', #CACRC
    '1111111111111011',
    '1110111111111011', #CACDIR
    '1111111111111011',
    '1110101111111011', #CACALU
    '1111111111111011',

    '1111011111110111', #CRARB
    '1111111111110111',
    '1111001111110111', #CRARC
    '1111111111110111',
    '1110111111110111', #CRADIR
    '1111111111110111',
    '1110101111110111', #CRAALU
    '1111111111110111',

    '1111101111101111', #CRBRA
    '1111111111101111',
    '1111001111101111', #CRBRC
    '1111111111101111',
    '1110111111101111', #CRBDIR
    '1111111111101111',
    '1110101111101111', #CRBALU
    '1111111111101111',

    '1111101111011111', #CRCRA
    '1111111111011111',
    '1111011111011111', #CRCRB
    '1111111111011111',
    '1110111111011111', #CRCDIR
    '1111111111011111',
    '1110101111011111', #CRCALU
    '1111111111011111',

    # ENTRADAS
    '1101101111111111', #CIRA
    '1101111111111111',
    '1101011111111111', #CIRB
    '1101111111111111',
    '1101001111111111', #CIRC
    '1101111111111111',
    '1100111111111111', #CIDIR
    '1101111111111111',
    '1100101111111111', #CIALU
    '1101111111111111',

    '1011101111111111', #CI2RA
    '1011111111111111',
    '1011011111111111', #CI2RB
    '1011111111111111',
    '1011001111111111', #CI2RC
    '1011111111111111',
    '1010111111111111', #CI2DIR
    '1011111111111111',
    '1010101111111111', #CI2ALU
    '1011111111111111',

    # SALIDAS
    '1001111111111101', #COOUT
    '1111111111111101',
    '1001111111111011', #CACCOUT
    '1111111111111011',
    '1001111111110111', #CRAOUT
    '1111111111110111',
    '1001111111101111', #CRBOUT
    '1111111111101111',
    '1001111111011111', #CRCOUT
    '1111111111011111',

    '0111111111111101', #COOUT2
    '1111111111111101',
    '0111111111111011', #CACCOUT2
    '1111111111111011',
    '0111111111110111', #CRAOUT2
    '1111111111110111',
    '0111111111101111', #CRBOUT2
    '1111111111101111',
    '0111111111011111', #CRCOUT2
    '1111111111011111',

    '0101111111111101', #COOUT3
    '1111111111111101',
    '0101111111111011', #CACCOUT3
    '1111111111111011',
    '0101111111110111', #CRAOUT3
    '1111111111110111',
    '0101111111101111', #CRBOUT3
    '1111111111101111',
    '0101111111011111', #CRCOUT3
    '1111111111011111',

    '0011111111111101', #CODOUT
    '1111111111111101',
    '0011111111111011', #CACCDOUT
    '1111111111111011',
    '0011111111110111', #CRADOUT
    '1111111111110111',
    '0011111111101111', #CRBDOUT
    '1111111111101111',
    '0011111111011111', #CRCDOUT
    '1111111111011111',

    # ALU
    '1110010111111101', #AALUO
    '1111110111111101',
    '1110010111110111', #AALUA
    '1111110111110111',
    '1110010111101111', #AALUB
    '1111110111101111',
    '1110010111011111', #AALUC
    '1111110111011111',

    '0000011111111101', #NALUO
    '0001111111111101',
    '0000011111110111', #NALUA
    '0001111111110111',
    '0000011111101111', #NALUB
    '0001111111101111',
    '0000011111011111', #NALUC
    '0001111111011111',

    # SALTOS
    '1111111111111101', #JIO
    '1111111110111101',
    '1111111111110111', #JIRA
    '1111111110110111',
    '1111111111101111', #JIRB
    '1111111110101111',
    '1111111111011111', #JIRC
    '1111111110011111',

    '1111111111111101', #JCCO
    '1111111101111101',
    '1111111111110111', #JCCRA
    '1111111101110111',
    '1111111111101111', #JCCRB
    '1111111101101111',
    '1111111111011111', #JCCRC
    '1111111101011111',

    '1111111111111101', #JCZO
    '1111111011111101',
    '1111111111110111', #JCZRA
    '1111111011110111',
    '1111111111101111', #JCZRB
    '1111111011101111',
    '1111111111011111', #JCZRC
    '1111111011011111',
]


def convertirABinario(numero):
    binario = ""
    binarioFinal = ""
    
    if (numero >= 0 & numero <= 255):
        while(numero > 0):
            if (numero%2 == 0):
                binario = "0" + binario
            else:
                binario = "1" + binario

            numero = int(math.floor(numero/2))
    else:
        if (numero == 0):
            binario = "00000000"
        else:
            binario = "No se pudo convertir el numero"
    
    for i in range(8 - len(binario)):
        binarioFinal += "0"

    binarioFinal += binario
    return binarioFinal


file = open(archivo, "w")
cantidadInstrucciones = len(instruccionesControl)
parteA = ""
parteB = ""
cadenaFinal = ""
contador = 0


for i in range(0, cantidadInstrucciones, 2):
    parteA = instruccionesControl[i]
    parteB = instruccionesControl[i+1]

    cadenaFinal = "0" + convertirABinario(contador) + "001" + parteA.replace(" ", "")
    file.write(cadenaFinal)
    print("-> ",cadenaFinal)

    cadenaFinal = "0" + convertirABinario(contador) + "010" + parteB.replace(" ", "")
    file.write(cadenaFinal)

    print("-> ",cadenaFinal)
    print("")
    contador = contador + 1

print("\n\nArchivo generado con exito\n")
print("Se generaron " + str(contador) + " instrucciones")
file.close()